{"version":3,"sources":["reduser.js","core/rootReducer.js","core/store.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["table","createSlice","name","initialState","rows","columns","reducers","setRows","state","action","payload","setColumns","actions","tableReducer","reducer","RootReducer","combineReducers","store","configureStore","getStats","coefficient","Performanse","start","time","end","perfProc","performanceStat","toFixed","App","dispatch","useDispatch","useState","count","setCount","performance","now","performanceStart","useSelector","useEffect","Array","keys","useLayoutEffect","setTimeout","v","rFilter","filter","i","className","src","logo","alt","map","row","col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wMAMMA,EAAOC,YAAY,CACrBC,KAAM,QACNC,aANiB,CACjBC,KAAM,GACNC,QAAS,IAKTC,SAAU,CACNC,QADM,SACEC,EAAOC,GACXD,EAAMJ,KAAOK,EAAOC,SAExBC,WAJM,SAIKH,EAAOC,GACdD,EAAMH,QAAUI,EAAOC,Y,EAS/BV,EAAMY,QAFNL,E,EAAAA,QACAI,E,EAAAA,WAGSE,EAAeb,EAAMc,QCbnBC,EAPbC,YAAgB,CACdH,iBCKWI,EALDC,YAAe,CAC3BJ,QAASC,I,uBCPI,MAA0B,iC,eCczC,SAASI,EAASC,GACd,OAAIA,GAAe,GACR,8JAEPA,GAAe,GACR,sJAEJ,+QAGX,IAAMC,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MACZC,EAD4B,EAATC,IACNF,EACbG,EAlBV,SAAyBF,GAErB,OADiB,KACCA,EAAO,IAgBRG,CAAgBH,GAC3BH,EAAcK,EAAW,IAAM,IAAMA,EAC3C,OACI,qCACI,uCAAUF,EAAV,SACA,mDAAiBH,EAAYO,UAA7B,OACA,uEAAYR,EAASC,GAArB,WA2DGQ,MArDf,WACI,IAAMC,EAAWC,cADN,EAEeC,mBAAS,GAFxB,mBAEJC,EAFI,KAEGC,EAFH,OAGgBF,oBAAS,kBAAMG,YAAYC,SAA/CC,EAHI,sBAIaC,aACpB,qBAAExB,gBADCT,EAJI,EAIJA,KAAMC,EAJF,EAIEA,QA4Bb,OAvBAiC,qBAAU,WACN,IAAMlC,EAAI,YAAOmC,MAAM,KAAMC,QACvBnC,EAAO,YAAOkC,MAAM,KAAKC,QAC/BX,EAAStB,EAAQH,IACjByB,EAASlB,EAAWN,MACrB,IAEHoC,2BAAgB,WACZC,YAAW,WACHV,GAlDG,GAmDPC,GAAS,SAAAU,GAAC,QAAMA,OACjB,MACL,CAACvC,IAEHkC,qBAAU,WACN,GAxDW,IAwDPN,GACAA,EAAQ,EAAG,CACX,IACMY,EADI,YAAOL,MAAM,KAAMC,QACRK,QAAO,SAAAC,GAAC,OAAKA,GA3D3B,EA2D6Cd,KAAY,KAChEH,EAAStB,EAAQqC,OAEtB,CAACZ,IAGA,sBAAKe,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SAnEtC,IAoEFlB,GAAwB,cAAC,EAAD,CAAaV,MAAOc,EAAkBZ,IAAKU,YAAYC,WAEpF,kCACI,gCACI,gCACC/B,EAAK+C,KAAI,SAAAC,GAAG,OACT,6BACK/C,EAAQ8C,KAAI,SAAAE,GAAG,OAAK,6BAAeA,GAANA,OADzBD,gBCpElBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAD,CAAU/C,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFgD,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.890637a0.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    rows: [],\n    columns: [],\n}\nconst table =createSlice({\n    name: 'table',\n    initialState,\n    reducers: {\n        setRows(state, action) {\n            state.rows = action.payload;\n        },\n        setColumns(state, action)  {\n            state.columns = action.payload;\n        },\n\n    },\n});\n\nexport const {\n    setRows,\n    setColumns\n} = table.actions;\n\nexport const tableReducer = table.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport {tableReducer} from \"../reduser\";\n\n\nconst createRootReducer = () =>\n  combineReducers({\n    tableReducer\n  });\n\nconst RootReducer = createRootReducer();\n\n\nexport default RootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport RootReducer from './rootReducer';\n\n\n\nconst store = configureStore({\n  reducer: RootReducer,\n\n});\n\nexport default store;\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useDispatch, useSelector} from 'react-redux';\nimport {useEffect, useLayoutEffect, useState} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {setRows, setColumns} from \"./reduser\";\n\nconst TEST_COUNT = 5;\n\nfunction performanceStat(time) {\n    const standard = 6500;\n    return standard / time * 100\n}\n\n\nfunction getStats(coefficient) {\n    if (coefficient >= 85) {\n        return 'Мы рекомендуем для работы с ТД'\n    }\n    if (coefficient >= 70) {\n        return 'Возможны лаги в отображении'\n    }\n    return 'Возможны сильные проседания в производительности'\n}\n\nconst Performanse = ({start, end}) => {\n    const time = end - start;\n    const perfProc = performanceStat(time)\n    const coefficient = perfProc > 100 ? 100 : perfProc;\n    return (\n        <>\n            <p>Time: {time} ms</p>\n            <p>Сoefficient: {coefficient.toFixed()} </p>\n            <p>Статус: {getStats(coefficient)} </p>\n        </>\n    )\n\n}\n\nfunction App() {\n    const dispatch = useDispatch();\n    const [count, setCount] = useState(0)\n    const [performanceStart] = useState(() => performance.now())\n    const {rows, columns} = useSelector(\n        ({tableReducer}) => tableReducer,\n    );\n\n\n    useEffect(() => {\n        const rows = [...Array(1000).keys()];\n        const columns = [...Array(100).keys()];\n        dispatch(setRows(rows))\n        dispatch(setColumns(columns))\n    }, [])\n\n    useLayoutEffect(() => {\n        setTimeout(() => {\n            if (count >= TEST_COUNT) return;\n            setCount(v => ++v)\n        }, 10)\n    },[rows])\n\n    useEffect(() => {\n        if (count === TEST_COUNT) return;\n        if (count > 1) {\n            const rows = [...Array(1000).keys()];\n            const rFilter = rows.filter(i => (i % (TEST_COUNT - count)) === 0 ? false : true);\n            dispatch(setRows(rFilter))\n        }\n    }, [count])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                {count === TEST_COUNT && <Performanse start={performanceStart} end={performance.now()}/>}\n            </header>\n            <section>\n                <table>\n                    <tbody>\n                    {rows.map(row => (\n                        <tr key={row}>\n                            {columns.map(col => (<td key={col}>{col}</td>))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './core/store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}